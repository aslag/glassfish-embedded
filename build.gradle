/*
This file is part of glassfish-embedded.

glassfish-embedded is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your option) any
later version.

glassfish-embedded is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
details.

You should have received a copy of the GNU General Public License along with
glassfish-embedded. If not, see <http://www.gnu.org/licenses/>.
*/

apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'maven'

/************************
extensions
************************/
project.ext.distDir = 'dist/'
project.ext.distLibSubDir = "lib/"

/************************
repo config
************************/
repositories {
  maven {
    url 'http://repo.tehlulz.com:8081/artifactory/libs-fork-local/'
  }
  maven {
    url 'http://repo.tehlulz.com:8081/artifactory/libs-snapshot/'
  }
  maven {
    url 'http://repo.tehlulz.com:8081/artifactory/libs-release/'
  }
}

/************************
project configuration
************************/
project.version = '0.3.4-SNAPSHOT'
targetCompatibility = 1.6
sourceCompatibility = 1.6

project.group = 'com.tehlulz.gradle.plugins'
jar.baseName = 'tehlulz-'+project.name

sourceSets {
  eclipseJunitResources {
    resources.srcDir file ('src/eclipse-junit-resources')
  }
}

configurations {
  groovyEclipseSupport 

  // ensure groovy is not a runtime dep for entire project, just tests (cf. http://issues.gradle.org/browse/GRADLE-1124)
  compile.extendsFrom = []
  testCompile.extendsFrom groovy
}

dependencies {
  compile gradleApi()

  /* Logging strategy:

   * The plugin itself uses slf4j; messages are handled by Gradle at runtime.
   * GlassFish's logging is handled by JUL; this is redirected to 
   * glassfish-embed.log at the FINEST level. 

   * Hosted applications that use slf4j will have their config files 
   * (Logback.xml, log4j.properties) ignored. Output is sent to stdout by 
   * Gradle. TODO: fix this!
   */
  compile 'org.slf4j:slf4j-api:1.+'

  compile 'org.glassfish.main.extras:glassfish-embedded-web:3.1.2.2'
  compile 'net.jcip:jcip-annotations:1.+@jar'

  // Groovy, spock test support
  def groovyVer = '2.0.+'
  def groovyEclipseSupport20 = [
    'antlr:antlr:2.7.7',
    'org.ow2.asm:asm:4.0',
    'org.ow2.asm:asm-util:4.0',
    'org.ow2.asm:asm-analysis:4.0',
    'org.ow2.asm:asm-commons:4.0',
    'org.codehaus.gpars:gpars:1.0-beta-2',
    'org.fusesource.jansi:jansi:1.6',
    'commons-cli:commons-cli:1.2',
    'jline:jline:1.0',
    'com.thoughtworks.xstream:xstream:1.4.2'
]

  groovy "org.codehaus.groovy:groovy-all:$groovyVer"
  groovyEclipseSupport groovyEclipseSupport20

  testCompile 'junit:junit:4.+'
  testCompile "org.codehaus.groovy:groovy-all:$groovyVer"
  testCompile ('org.spockframework:spock-core:0.7-groovy-2.0-SNAPSHOT') 
  {
    exclude group: 'org.codehaus.groovy' // don't bother with the version of groovy spock depends on
  }
  // optional dependencies for spock that improve its mocking capacity
  testCompile 'cglib:cglib-nodep:2+'
  testCompile 'org.objenesis:objenesis:1+'

}

/************************
cache settings
************************/
configurations.all {
  resolutionStrategy {
    // cache dynamic versions for 10 minutes
    cacheDynamicVersionsFor 10, 'minutes'

    // don't cache changing modules at all
    cacheChangingModulesFor 0, 'seconds'
  }
}

/************************
eclipse conveniences
************************/
eclipse.classpath.downloadSources = true
eclipse.classpath.downloadJavadoc = true

eclipse.classpath.defaultOutputDir = file('eclipse-build')

// the following works only for java 1.6 and newer b/c the string has changed
if (targetCompatibility >= JavaVersion.toVersion(1.6)) {
  eclipse.classpath.containers.clear()
  eclipse.classpath.containers.add('org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-' + targetCompatibility)
}

eclipse {
  classpath {
    plusConfigurations += sourceSets.eclipseJunitResources.getCompileClasspath() // make sure eclipse-junit-resources is added first
    plusConfigurations += configurations.groovyEclipseSupport // add groovySupport if on this project
    plusConfigurations += project.configurations.compile
  }
}

/************************
root proj. publishing 
************************/
configurations {
     sources
     javadocs
}

task packageJavadocs (type: Jar, dependsOn: 'javadoc') {
     from project.javadoc.destinationDir
     classifier = 'javadoc'
     baseName = jar.baseName
}
task packageSources (type: Jar, dependsOn:classes) {
     from project.sourceSets.main.allSource
     classifier = 'sources'  // either here or in artifacts block
     baseName = jar.baseName
}

artifacts {
  sources (packageSources) {
      type = 'jar'
      classifier = 'sources' // either here or in packageSources
  }

  javadocs  (packageJavadocs) {
      type = 'javadoc'
      classifier = 'javadoc'
  }
}

uploadArchives {
  repositories.mavenDeployer {
    ext.userAuth = {
      authentication(userName: System.properties["tehlulzrepouser"], password: System.properties["tehlulzrepopass"])
    }
    snapshotRepository(url: 'http://repo.tehlulz.com:8081/artifactory/libs-snapshot-local', userAuth)
    repository(url: 'http://repo.tehlulz.com:8081/artifactory/libs-release-local', userAuth)
  }
}

task 'uploadSources'(type:Upload) {
  repositories {
      addFirst uploadArchives.repositories.iterator().next()
  }
  configuration = configurations.sources
}

task 'uploadJavadocs'(type:Upload, dependsOn:'uploadSources') {
  repositories {
      addFirst uploadArchives.repositories.iterator().next()
  }
  configuration = configurations.javadocs
}

project.uploadArchives.dependsOn 'uploadJavadocs' 
